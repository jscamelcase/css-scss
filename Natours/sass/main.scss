/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/
$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

*,
::before,
::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: $color-grey-dark;
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-dark, 0.8)
    ),
    url("./../img/hero.jpg");
  background-size: cover; /* adapt to viewport size */
  background-position: top; /* top always stays fixed */
  position: relative;
  clip-path: polygon(
    0% 0%,
    100% 0%,
    100% 75%,
    0% 100%
  ); /*defines the visable part of the element*/

  /* following BEM, and using "nesting" with the combined & sign to create the new sub selector helps to avoid clashes with logo-box in another module */

  &__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
  }

  &__logo {
    height: 3.5rem;
  }

  &__text-box {
    position: absolute;
    top: 40%; /* not 50% because it looks better with design */
    left: 50%;
    transform: translate(-50%, -50%);
    /* we are now shifting relative to the element's size, no the parent, 50% to the left of its width, and 50% of its height to the top, to put it dead center with the position absolute */
    text-align: center; /* centers the child inline-block anchor/button */
  }
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;

  backface-visibility: hidden; /* usually used for 3d rotation to hide the backface of the element rather than mirror, but it is also used to smooth the animation of an element */
  margin-bottom: 6rem;

  &--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;

    /* animation-delay: 3s; 
  animation-iteration-count: 3;
  */
  }

  &--sub {
    display: block;
    letter-spacing: 1.75px;
    font-size: 2rem;
    font-weight: 700;
    animation: moveInRight 1s ease-out;
  }
}

/* For browser performance, always best to animate 
only two properties the opacity and transform */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    /* you can put more than one value on the transform line */
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}
/* The link is pseudo class, is for an anchor element that 
sets a rule for when a link is in an unclicked state. 
:visited */

/* the intial state gets the transiton property */

.btn {
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 2rem;
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem;
  }

  &:hover {
    transform: translateY(-0.3rem);
    box-shadow: 0 10px 20px rgba($color-black, 0.2);

    &::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }

  /* all translated with psedo class relate to the resting state , so raising the translateY valuu relative to .btn hover makes it appear like it moves up on the screen */
  &:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      background-color: $color-white;
    }
  }

  &::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1; /*put the after behind the button */
    transition: all 0.4s;
  }

  &--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    animation-fill-mode: backwards;
  }
}
